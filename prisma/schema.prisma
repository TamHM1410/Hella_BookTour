// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model City {
  id       Int        @id @default(autoincrement())
  cityName String     @unique
  country  String
  status   Boolean
  createAt DateTime   @default(now())
  updateAt DateTime   @updatedAt
  deleteAt DateTime?
  location Location[]
}

model Location {
  id     Int  @id @default(autoincrement())
  cityId Int
  city   City @relation(fields: [cityId], references: [id])

  locationName    String
  locationAddress String
  status          Boolean
  createAt        DateTime            @default(now())
  updateAt        DateTime            @updatedAt
  deleteAt        DateTime?
  image           String?
  activityId      Location_Activity[]

  locationInTour    Location_In_Tour[]
  Point_Of_Interest Point_Of_Interest[]
}

model Location_Activity {
  id                  Int       @id @default(autoincrement())
  locationId          Int
  location            Location  @relation(fields: [locationId], references: [id])
  activityName        String
  activityDuration    String
  activityDescription String
  status              Boolean
  createAt            DateTime  @default(now())
  updateAt            DateTime  @updatedAt
  deleteAt            DateTime?
}

model Categoty_Of_POI {
  id                Int                 @id @default(autoincrement())
  categoryName      String
  status            Boolean
  createAt          DateTime            @default(now())
  updateAt          DateTime            @updatedAt
  deleteAt          DateTime?
  Point_Of_Interest Point_Of_Interest[]
}

model Point_Of_Interest {
  id             Int             @id @default(autoincrement())
  POIName        String
  POIDescription String
  location       Location        @relation(fields: [locationId], references: [id])
  categoryPOI    Categoty_Of_POI @relation(fields: [categoryPOI_ID], references: [id])
  locationId     Int
  categoryPOI_ID Int
  status         Boolean
  createAt       DateTime        @default(now())
  updateAt       DateTime        @updatedAt
  deleteAt       DateTime?
}

model Vehicle {
  id          Int         @id @default(autoincrement())
  vehicleName VehicleName
  status      Boolean
  capacity    String
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  deleteAt    DateTime?
  tour        Tour[]
}

model Tour {
  id             Int                @id @default(autoincrement())
  tourName       String
  status         Boolean
  price          Float
  vehicleTypeId  Int
  tourType       TourType
  createAt       DateTime           @default(now())
  updateAt       DateTime           @updatedAt
  deleteAt       DateTime?
  image          String?
  trip           Trip[]
  locationinTour Location_In_Tour[]
  vehicleType    Vehicle            @relation(fields: [vehicleTypeId], references: [id])
}

model Location_In_Tour {
  id         Int @id @default(autoincrement())
  locationId Int

  tourId      Int
  tour        Tour      @relation(fields: [tourId], references: [id])
  location    Location  @relation(fields: [locationId], references: [id])
  status      Boolean
  duration    String?
  description String
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deleteAt    DateTime?
  startCity   String
  endCity     String
}

model Tour_Guide {
  id       Int          @id @default(autoincrement())
  userId   String       @unique
  status   Boolean
  language LanguageType
  createAt DateTime     @default(now())
  updateAt DateTime     @updatedAt
  deleteAt DateTime?
}

model Trip {
  id          Int @id @default(autoincrement())
  tourGuideId Int

  tourId    Int
  tour      Tour    @relation(fields: [tourId], references: [id])
  startDate String?
  endDate   String?

  totalCustomer Int

  status Boolean

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
  booking  Booking[]
}

model Payment_Method {
  id          Int         @id @default(autoincrement())
  paymentType PaymentType
  bankDetails String
  note        String?
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  deleteAt    DateTime?
  payment     Payment[]
}

model Payment {
  id              Int            @id @default(autoincrement())
  paymentName     String
  paymentDate     DateTime
  amount          Float
  status          Boolean
  refunded        Boolean
  refundedTime    DateTime?
  refundedAmount  DateTime?
  paymentMethodId Int
  paymentMethod   Payment_Method @relation(fields: [paymentMethodId], references: [id])

  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deleteAt  DateTime?
  bookingId Int
  booking   Booking   @relation(fields: [bookingId], references: [id])
}

model Booking {
  id          Int    @id @default(autoincrement())
  bookingDate String

  userId        String
  totalAmount   Float
  totalCustomer Int
  status        Boolean

  tripId Int
  trip   Trip @relation(fields: [tripId], references: [id])

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
  payment  Payment[]
}

enum TourType {
  Adventure
  Historical
  Cultural
  Nature
  Food
}

enum VehicleName {
  Car
  Bus
  Bike
}

enum LanguageType {
  English
  Vietnamese
  French
  Italy
  Japanese
  Chinese
  Thai
}

enum PaymentType {
  CreditCard
  DebitCard
  PayPal
}
