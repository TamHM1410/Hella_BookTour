// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model City {
  id       Int       @id @default(autoincrement())
  cityName String    @unique
  country  String
  status   Boolean
  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
}

model Location {
  id     Int @id @default(autoincrement())
  cityId Int

  locationName    String
  locationAddress String
  status          Boolean
  createAt        DateTime  @default(now())
  updateAt        DateTime  @updatedAt
  deleteAt        DateTime?
  image           String?
}

model Location_Activity {
  id                  Int       @id @default(autoincrement())
  locationId          Int
  activityName        String
  activityDuration    String
  activityDescription String
  status              Boolean
  createAt            DateTime  @default(now())
  updateAt            DateTime  @updatedAt
  deleteAt            DateTime?
}

model Categoty_Of_POI {
  id           Int       @id @default(autoincrement())
  categoryName String
  status       Boolean
  createAt     DateTime  @default(now())
  updateAt     DateTime  @updatedAt
  deleteAt     DateTime?
}

model Point_Of_Interest {
  id             Int       @id @default(autoincrement())
  POIName        String
  POIDescription String
  locationId     Int
  categoryPOI_ID Int
  status         Boolean
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt
  deleteAt       DateTime?
  image          String?
}

model Vehicle {
  id          Int         @id @default(autoincrement())
  vehicleName VehicleName
  status      Boolean
  capacity    String
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  deleteAt    DateTime?
}

model Tour {
  id            Int       @id @default(autoincrement())
  tourName      String
  status        Boolean
  price         Float
  vehicleTypeId Int
  tourType      TourType
  createAt      DateTime  @default(now())
  updateAt      DateTime  @updatedAt
  deleteAt      DateTime?
  image         String?
}

model Location_In_Tour {
  id         Int @id @default(autoincrement())
  locationId Int

  tourId Int

  status      Boolean
  duration    String?
  description String
  createAt    DateTime  @default(now())
  updateAt    DateTime  @updatedAt
  deleteAt    DateTime?
  startCity   String
  endCity     String
}

model Tour_Guide {
  id       Int          @id @default(autoincrement())
  userId   String       @unique
  status   Boolean
  language LanguageType
  createAt DateTime     @default(now())
  updateAt DateTime     @updatedAt
  deleteAt DateTime?
}

model Trip {
  id          Int @id @default(autoincrement())
  tourGuideId Int

  tourId Int

  totalCustomer Int

  status Boolean

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
}

model Payment_Method {
  id          Int         @id @default(autoincrement())
  paymentType PaymentType
  bankDetails String
  note        String?
  createAt    DateTime    @default(now())
  updateAt    DateTime    @updatedAt
  deleteAt    DateTime?
}

model Payment {
  id              Int       @id @default(autoincrement())
  paymentName     String
  paymentDate     DateTime
  amount          Float
  status          Boolean
  refunded        Boolean
  refundedTime    DateTime?
  refundedAmount  DateTime?
  paymentMethodId Int

  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  deleteAt  DateTime?
  bookingId Int
}

model Booking {
  id            Int     @id @default(autoincrement())
  bookingDate   String
  fromDate      String
  toDate        String
  userId        String
  totalAmount   Float
  totalCustomer Int
  status        Boolean

  tripId Int

  createAt DateTime  @default(now())
  updateAt DateTime  @updatedAt
  deleteAt DateTime?
}

enum TourType {
  Adventure
  Historical
  Cultural
  Nature
  Food
}

enum VehicleName {
  Car
  Bus
  Bike
}

enum LanguageType {
  English
  Vietnamese
  French
  Italy
  Japanese
  Chinese
  Thai
}

enum PaymentType {
  CreditCard
  DebitCard
  PayPal
}
